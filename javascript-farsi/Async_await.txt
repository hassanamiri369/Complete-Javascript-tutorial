جاوااسکریپت یه زبان 
single treed : تک رشته ای 
هست 
..................................
معنی یه : syncrhounouse : هم زمان 
یعنی اگر 400 خط کد هم داشته باشیم تا زمانی که تابع الف اجرا نشه سراغ تابع ب نمیره
....................................
در جاوااسکریپت کد ها به صورت 
syncrhounouse : همزمان 
اجرا میشن .
........................................
async horuonuos : ناهمزمان 
کد ها پشت سر هم اجرا نمیشن 
منطق اینه : الان شروع کن بعدا که تموم شد اجرا کن 

.................................................
این جور اجرا شدن کد ها به صورت 
syncrhounouse
زمانی که اجرای یک خط از کد 
مثلا  (تابعی که ری کوئست میزنه به دیتا بیس و 4 ثانیه طول میکشه تا جواب بگیره)
زمان بر میشه 

این یعنی مشکل 

به خاطر همین میاییم و این قسمت رو به صورت 
asynchrounous
مینویسیم
یعنی میره ری کوئست میزنه و وقتی جواب رو گرفت میاد اجرا میشه خودش 
دیگه خط کد های بعدی معطل نمی شن 


.......................................................

حالا ما این سبک از کد زدن به صورت 
asynchrounous 
رو میتونیم به  سه روش 
callback()
promise 
async await 

هندل کنیم که بهترین راه همون 
async await 
هست 


مثال : 

console.log(1)
print()
console.log(3)


function print(){
    settimeout(() => {
        console.log(2)
    } , 2000)
}


خروجی کار میشه این : 

1
3
2 


تابع
settimeout()
یه تابع 
asynchrounous
هستش 

...........................
Async/Await
 برای ساده سازی روند کار و نوشتن
Promise 
های زنجیره ای طراحی شده است.
.................................
توابع 
async
یه پرامیس برمی گردونن


...................
توابع 
Async 
میتوانند از کلیدواژه
Await 
 استفاده کنند.این کار توابع
Async  
را متوقف میکند و منتظر  اجرای دستور بازگشتی می ماند.






const url = "https://jsonplaceholder.typicode.com/comments/";

// await : یعنی انقدر اون پشت منتظر بمون تا این فچ ما
// جواب برگردونه ریزالو برگردونه و ریسپانس داشته باشه 
// با نوشتن اون 
// async 
// پشت فانکشن کل فانکشن من شد 
// asynchrounous

const getTodo = async function(url){
    const response = await fetch(url)
    if(response.status === 200){
        const data = await response.json()
        return data
    }else{
        throw new Error("not found...")
    }
}

getTodo(url)
.then(function(data){
    console.log(data)
})
.catch(err => console.log(err.message))  // اگر اینجا پراپرتی یه message 
// رو بنویسی فقط متن ارور رو میگیری توی کنسول 

